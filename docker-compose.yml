version: "3"
# media containers
services:

  ombi:
    image: linuxserver/ombi:latest
    container_name: ombi
    restart: always
    ports:
      - 3579:3579
    environment:
      - "Logging:LogLevel:Default=Warning"
      - "Logging:LogLevel:System=Warning"
      - PUID=1001
      - PGID=1002
      - TZ=Europe/Paris
    volumes:
      - /mnt/gloubinours/jellies-db/ombi/config:/config
      - /etc/localtime:/etc/localtime:ro
      - "${PWD}/ombi/appsettings.json:/opt/ombi/appsettings.json"
  sonarr:
    image: linuxserver/sonarr:latest
    restart: always
    #    user: 1001:1002
    environment:
      - PUID=1020
      - PGID=1002
      - TZ=Europe/Paris
    volumes:
      - /mnt/gloubinours/jellies-db/sonarr/config:/config
      - /mnt/gloubinours/shows:/tv
      - /mnt/gloubinours/transmission:/downloads
    ports:
      - 8989:8989

  radarr:
    image: "linuxserver/radarr:nightly"
    container_name: radarr
    restart: always
    environment:
      - "PUID=1000"
      - "PGID=1002"
      - TZ=Europe/Paris
    volumes:
      - /mnt/gloubinours/jellies-db/radarr/config:/config
      - /mnt/gloubinours/movies:/movies
      - /mnt/gloubinours/transmission:/downloads
    ports:
      - "7878:7878"

  bazarr:
    image: linuxserver/bazarr:latest
    restart: always
    environment:
      - PUID=1000
      - PGID=1002
      - TZ=Europe/Paris
    volumes:
      - /mnt/gloubinours/jellies-db/bazarr/config:/config
      - /mnt/gloubinours/movies:/movies
      - /mnt/gloubinours/shows:/tv
    ports:
      - 6767:6767
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.services.bazarr.loadbalancer.server.port=6767"
    #   - "traefik.http.routers.bazarr.rule=Host(`bazarr.doxx.fr`)"
    #   - "traefik.http.routers.bazarr.middlewares=private@file"

  lidarr:
    image: linuxserver/lidarr:latest
    restart: always
    environment:
      - PUID=1000
      - PGID=1002
      - TZ=Europe/Paris
    ports: 
      - 8686:8686
    volumes:
      - /mnt/gloubinours/jellies-db/lidarr/config:/config
      - /mnt/gloubinours/music:/music
      - /mnt/gloubinours/transmission:/downloads
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.services.lidarr.loadbalancer.server.port=8686"
    #   - "traefik.http.routers.lidarr.rule=Host(`lidarr.doxx.fr`)"
    #   - "traefik.http.routers.lidarr.middlewares=private@file"

        #
        #readarr:
        #    image: linuxserver/readarr:nightly
        #    restart: always
        #    environment:
        #      - PUID=33
        #      - PGID=33
        #      - TZ=America/New_York
        #    volumes:
        #      - /tank/container_data/readarr:/config
        #      - /tank/cloud/books:/books
        #      - /tank/downloads:/downloads
        #    expose:
        #      - 8787
        #    # depends_on:
        #    #   - qbittorrent
        #    #   - nzbget
        #    #   - prowlarr
        #    labels:
        #      - "traefik.enable=true"
        #      - "traefik.http.services.readarr.loadbalancer.server.port=8787"
        #      - "traefik.http.routers.readarr.rule=Host(`readarr.doxx.fr`)"
        #      - "traefik.http.routers.readarr.middlewares=private@file"
        #

  jackett:
    image: linuxserver/jackett:latest
    container_name: jackett
    restart: unless-stopped
    ports:
      - "9117:9117"
    environment:
      - PUID=1001
      - PGID=1001
      - TZ=Europe/Paris
    volumes:
      - /mnt/gloubinours/jellies-db/jackett/config:/config
      - /etc/localtime:/etc/localtime:ro


    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.jackett.entrypoints=web,websecure"
    #   - "traefik.http.routers.jackett.rule=Host(`jackett.doxx.fr`)"
    #   - "traefik.http.services.jackett.loadbalancer.server.port=9117"
    #   - "traefik.http.routers.jackett.tls=true"
    #   - "traefik.http.routers.jackett.tls.certresolver=leresolver"
# jellyfin:
#   image: jellyfin/jellyfin:latest
#   restart: always
#   environment:
#     - UID=33
#     - GID=33
#     - TZ=America/New_York
#   devices:
#     - /dev/dri
#   volumes:
#     - /tmp/jellyfin:/transcodes
#     - /tank/container_data/jellyfin_config:/config
#     - /tank/container_data/jellyfin_cache:/cache
#     - /tank/cloud/videos:/media/video:ro
#     - /tank/cloud/music:/media/music:ro
#     - /tank/cloud/books:/media/books:ro
#   expose:
#     - 8096
#   ports:
#     - 1900:1900/udp
#   labels:
#     - "traefik.enable=true"
#     - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
#     - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.doxx.fr`)"
#     - "traefik.http.routers.jellyfin.middlewares=secure@file"

#qbittorrent:
#   image: linuxserver/qbittorrent:latest
#   restart: always
#   environment:
#     - PUID=33
#     - PGID=33
#     - UMASK=022
#     - TZ=America/New_York
#     - WEBUI_PORT=8080
#   volumes:
#     - /tank/container_data/qbittorrent:/config
#     - /tank/downloads:/downloads
#   expose:
#     - 8080
#   ports:
#     - 1080:1080/tcp
#     - 1080:1080/udp
#   labels:
#     - "traefik.enable=true"
#     - "traefik.http.services.qbittorrent.loadbalancer.server.port=8080"
#     - "traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.doxx.fr`)"
#     - "traefik.http.routers.qbittorrent.middlewares=private@file"

  # nzbget:
  #   image: linuxserver/nzbget:latest
  #   restart: always
  #   environment:
  #     - PUID=33
  #     - PGID=33
  #     - UMASK=022
  #     - TZ=America/New_York
  #   volumes:
  #     - /tank/container_data/nzbget:/config
  #     - /tank/downloads/nzbget:/downloads
  #   expose:
  #     - 6789
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.services.nzbget.loadbalancer.server.port=6789"
  #     - "traefik.http.routers.nzbget.rule=Host(`nzbget.doxx.fr`)"
  #     - "traefik.http.routers.nzbget.middlewares=private@file"

  # prowlarr:
  #   image: linuxserver/prowlarr:nightly
  #   restart: always
  #   environment:
  #     - PUID=33
  #     - PGID=33
  #     - TZ=America/New_York
  #   volumes:
  #     - /tank/container_data/prowlarr:/config
  #   expose:
  #     - 9696 
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
  #     - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.doxx.fr`)"
  #     - "traefik.http.routers.prowlarr.middlewares=private@file"


# curl -L -o docker-compose.yml "https://dev.funkwhale.audio/funkwhale/funkwhale/raw/${FUNKWHALE_VERSION}/deploy/docker-compose.yml"

  postgres:
    restart: unless-stopped
    networks:
      - default
    env_file: .env
    environment:
      - "POSTGRES_HOST_AUTH_METHOD=trust"
    image: postgres:11
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

  redis:
    restart: unless-stopped
    networks:
      - default
    env_file: .env
    image: redis:5
    volumes:
      - ./data/redis:/data

  celeryworker:
    restart: unless-stopped
    image: funkwhale/funkwhale:${FUNKWHALE_VERSION:-latest}
    networks:
      - default
    depends_on:
      - postgres
      - redis
    env_file: .env
    # Celery workers handle background tasks (such file imports or federation
    # messaging). The more processes a worker gets, the more tasks
    # can be processed in parallel. However, more processes also means
    # a bigger memory footprint.
    # By default, a worker will span a number of process equal to your number
    # of CPUs. You can adjust this, by explicitly setting the --concurrency
    # flag:
    #   celery -A funkwhale_api.taskapp worker -l INFO --concurrency=4
    command: celery -A funkwhale_api.taskapp worker -l INFO --concurrency=${CELERYD_CONCURRENCY-0}
    environment:
      - C_FORCE_ROOT=true
    volumes:

      - "${MUSIC_DIRECTORY_SERVE_PATH-/tmp/funkwhale/data/music}:${MUSIC_DIRECTORY_PATH-/music}:ro"
      - "${MEDIA_ROOT}:/data/media"

  celerybeat:
    restart: unless-stopped
    image: funkwhale/funkwhale:${FUNKWHALE_VERSION:-latest}
    networks:
      - default
    depends_on:
      - postgres
      - redis
    env_file: .env
    command: celery -A funkwhale_api.taskapp beat --pidfile= -l INFO

  api:
    #network_aliases:
    # - funkwhale-api
    #  - api
    restart: unless-stopped
    image: funkwhale/funkwhale:${FUNKWHALE_VERSION:-latest}
    # networks:
    #   - default
    depends_on:
      - postgres
      - redis
    env_file: .env
    volumes:
      - "${MUSIC_DIRECTORY_SERVE_PATH-~/Music/}:${MUSIC_DIRECTORY_PATH-/music}:ro"
      - "${MEDIA_ROOT}:${MEDIA_ROOT}"
      - "${STATIC_ROOT}:${STATIC_ROOT}"
      - "funkwhale-frontend:/data/frontend"
#FUNKWHALE_FRONTEND_PATH=/var/lib/funkwhale/frontend

# Nginx related configuration

  funkwhale-nginx:
    restart: unless-stopped
    # ports:
    #   - "127.0.0.1:5000:5000"
    image: nginx
    
    # networks:
    #   - default
    env_file:
      - .env
    environment:
      # Override those variables in your .env file if needed
      - "NGINX_MAX_BODY_SIZE=${NGINX_MAX_BODY_SIZE-100M}"
    volumes:
      - "./nginx/funkwhale.template:/etc/nginx/conf.d/funkwhale.template"
      - "./nginx/funkwhale_proxy.conf:/etc/nginx/funkwhale_proxy.conf"
      - "./nginx/conf.d/funkwhale.conf:/etc/nginx/conf.d/funkwhale.conf"
      - "${MUSIC_DIRECTORY_SERVE_PATH-/srv/funkwhale/data/music}:${MUSIC_DIRECTORY_PATH-/music}:ro"
      - "${MEDIA_ROOT}:${MEDIA_ROOT}:ro"
      - "${STATIC_ROOT}:${STATIC_ROOT}:ro"
      - "funkwhale-frontend:/data/frontend:ro"
    ports:
      # override those variables in your .env file if needed
      - "${FUNKWHALE_API_IP}:${FUNKWHALE_API_PORT}:80"
    command: >
        sh -c "envsubst \"`env | awk -F = '{printf \" $$%s\", $$1}'`\"
        < /etc/nginx/conf.d/funkwhale.template
        > /etc/nginx/conf.d/funkwhale.conf"

volumes:
    funkwhale-frontend:
# networks:
#   default:
